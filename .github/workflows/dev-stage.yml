# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Frontend-Dev Test CI

on:
  push:
    branches: [ "KAN-61-Env-zu-Laufzeit-anpassen" ]

env:
  # DOCKER env
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/vue
  ORGANISATION: OlympGuide

  # HELM env
  HELM_DIRECTORY: helm
  HELM_RELEASE_NAME: olympguide-frontend
  HELM_VALUES_FILE : values-stage.yaml
  # K8S env
  K8S_API: https://pm4.init-lab.ch/k8s/clusters/local
  K8S_NAMESPACE: olymp-guide-stage
    
permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: '20.11.1'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm run test

      - name: Build Vue Project
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: vue-build-artifact
          path: dist/
          retention-days: 5


  docker-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: '20.11.1'
        
      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: vue-build-artifact
          path: dist

      - name: Install dependencies
        working-directory: ./.github
        run: npm run install
      
      - name: Switch to Development Env
        run: npm run import-meta-env:development
    
      - name: image-build
        uses: ./.github/workflows/image-build
        with:
          registry: ${{ env.REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          tags: latest
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
  deploy-helm-ci:
    runs-on: ubuntu-22.04
    needs: [docker-build]
    environment: staging

    steps:
      - name: checkout sources
        uses: actions/checkout@v4
      - name: deploy
        uses: ./.github/workflows/helm-release
        with:
          helm-directory: ${{ env.HELM_DIRECTORY }}
          k8s-token: ${{ secrets.K8S_TOKEN }}
          k8s-api: ${{ env.K8S_API }}
          k8s-namespace: ${{ env.K8S_NAMESPACE }}
          helm-release-name: ${{ env.HELM_RELEASE_NAME }}
          helm-values-file: ${{ env.HELM_VALUES_FILE }}